Texas Hold'em Poker
===================


Concepts
--------

card
	rank
	suit
deck
dealer
player
	cash
	position
	hole cards
board
hand
bet
pot
small blind
large blind
checking
calling
betting
raising
folding
showdown
winning

    
Hand phases
-----------

- Rotate the dealer position.
- Post the small and big blinds.
- Deal the 2 Hole cards per player.
- Pre-Flop betting round.
- Deal the 3 Flop cards on the board.
- Flop betting round.
- Deal the Turn card on the board.
- Turn betting round.
- Deal the River card on the board.
- River betting round.
- Showdown.


Action types
------------

enum ActionType {
	CHECK
	CALL
	BET
	RAISE
	FOLD
}


Action classes
--------------

Action
	CheckAction()
	CallAction(int bet)
	BetAction(int amount)
	RaiseAction(int amount)
	FoldAction()


Action conditions
-----------------

Check: (bet == 0)
Bet:   (bet == 0)
Call:  (myBet < bet)
Raise: (bet > 0)
Fold:  Anytime


Classes
-------

class Card {
	-rank : int
	-suit : int
	+Card(int rank, int suit)
	+Card(String s)
	+getRank() : int
	+getSuit() : int
}

class Deck {
	-cards : Card[]
	+shuffle()
	+deal() : Card
	+deal(int noOfCards) : Card[]
	+deal(int rank, int suit) : Card
	+reset()
}

class GameEngine {
	int blind;
	Deck deck;
	Board board;
	Player[] players;
	List<Player> activePlayers;
	int handNumber;
	int bet;
	int pot;
	GameEngine(int blind, Players[] players)
	start();
}

class Board {
    -cards : Card[]
    -noOfCards : int
	+update(Card[] cards, int noOfCards, int bet, int pot)
	+setMessage(String message)
}

interface Player {

	/**
	 * Requests the player to act.
	 *
	 * @param allowedActions  The allowed actions.
	 * @param board           The board (community cards).
	 * @param bet             The current bet.
	 * @param pot             The current pot.
	 * @param position        The player's table position
	 * @param players         The other players
	 *
	 * @return The selected action.
	 */
	Action act(ActionType[] allowedActions, Card[] board, bet, pot, position, PlayerInfo[] players)

	/**
	 * Notification that a player has acted her turn.
	 *
	 * @param player The player.
	 * @param action The action.
	 */
	void playerActed(PlayerInfo player, Action action)

}

class PlayerInfo {
	String getName()
	int getCash()
	int getBet()
	Action getLastAction()
}


Bot algorithm
-------------

Factors:
- hole cards
- board cards
  - potential duplicates (more than One Pair)
  - potential straight
  - potential flush
- number of players
- table position
- bet
- pot
- cash
- actions from earlier table positions
- bluffing
- opponent behavior
  - bet
  - cash
  - tightness (loose/tight)
  - aggression (passive/aggressive)
  - bluffing

