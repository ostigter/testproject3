Ontology
========


Examples
--------

> isPerson(*)
> isMale(isPerson)
> isFemale(isPerson)
> isMale DISJOINT isFemale
> hasChildren(isPerson)
> isFather(isMale)
> isMother(isFemale)
> isChild(isPerson)
> isParent(isPerson)
> parentOf(isParent, isChild) 
> childOf(isChild, isParent)
> childOf INVERSE parentOf
> fatherOf(isFather, isChild)
> hasFather(isChild, isFather)
> hasFather INVERSE fatherOf
> motherOf(isMother, isChild)
> hasMother(isChild, isMother)
> hasMother INVERSE motherOf

> fatherOf(A, B)
    ->
        isFather(A)
        isMale(A)
        isPerson(A)
        isChild(B)
        isPerson(B)
        fatherOf(A, B)
        hasFather(B, A)
        parentOf(A, B)
        childOf(B, A)
> isPerson?
A
B
> A?
isPerson(A)
isMale(A)
isParent(A)
isFather(A)
parentOf(A, B)
fatherOf(A, B)
> B?
isPerson(B)
isChild(B)
childOf(B, A)
hasParent(B, A)
hasFather(B, A)
> isMale?
A
> isFemale?
> isParent?
A
> isFather?
A
> fatherOf(A)?
B
> childOf(B)?
A


Rules/relations
---------------

is REFLECTIVE TRANSITIVE

    is(X, Y) <-> is(Y, X)
    is(X, Y) AND is(Y, Z) -> is(X, Z)

isClass DISJOINT isInstance

    isClass(Animal)
    isClass(Car)
    isClass(Engine)

    isInstance(MyCar)
    isInstance(Car) -> ERROR: isClass() DISJOINT isInstance()

specializes TRANSITIVE INVERSE generalizes

    specializes(Mammal, Animal)     <-> generalizes(Animal, Mammal)
    specializes(HumanBeing, Mammal) <-> generalizes(Mammal, HumanBeing)
    specializes(HumanBeing, Animal) <-> generalizes(Animal, HumanBeing)

hasPart INVERSE isPartOf

    hasPart(Car, Engine) <-> isPartOf(Engine, Car)
    hasPart(Car, Engine)?  -> true
    hasPart(Engine, Car)?  -> false
    isPartOf(Engine, Car)? -> true
    hasPart(Bird, Engine)? -> false
    is(Automobile, Car)
    hasPart(Automobile, Engine)? -> true

contains ALIAS hasPart INVERSE isContainedBy

    contains(Car, Engine) <-> hasPart(Car, Engine) <-> isContainedBy(Engine, Car)

isInstanceOf INVERSE isClassOf

    isInstanceOf(Oscar, HumanBeing) <-> isClassOf(HumanBeing, Oscar)

isProperty

    isProperty(Length)
    isProperty(Volume)
    isProperty(Mass)
    isProperty(Temperature)
    isProperty(Time)
    isProperty(Color)

isMeasurementUnit

    isMeasurementUnit(Meter)
    isMeasurementUnit(Liter)
    isMeasurementUnit(Gram)
    isMeasurementUnit(Celcius)
    isMeasurementUnit(Second)

measuredIn(isProperty, isMeasurementUnit)

    measuredIn(Length, Meter)
    measuredIn(Volume, Liter)
    measuredIn(Mass, Gram)
    measuredIn(Temperature, Celcius)
    measuredIn(Time, Second)

isColor

    isColor(Red)
    isColor(Blue)
    isColor(Green)

hasProperty(isClass, isProperty)

    hasProperty(Car, Color)
    hasProperty(Car, Mass)
    hasProperty(Car, Length)
    
isInstance

    isInstance(MyCar)
    isInstanceOf(MyCar, Car)

instanceOf(X, Y) -> isInstance(X) AND isClass(Y)

    instanceOf(isInstance(), isClass())

    isClass(Car)?           -> true
    isInstance(Car)?        -> false
    isClass(MyCar)?         -> false
    isInstance(MyCar)?      -> true
    instanceOf(MyCar, Car)? -> true
    instanceOf(Car, MyCar)? -> false

isPhysical DISJOINT isAbstract

    isPhysical(Car)  <-> NOT isAbstract(Car)
    isAbstract(Time) <-> NOT isPhysical(Time)

hasColor(isInstance AND isPhysical, isColor)

    hasColor(MyCar, Red)
    hasColor(MyCar)       -> ERROR: Invalid number of operands
    hasColor(Color, MyCar)-> ERROR: NOT isInstance(Color)
    hasColor(Car,   Red)  -> ERROR: NOT isInstance(Car)
    hasColor(MyCar, Blah) -> ERROR: NOT isColor(Blah)
    hasColor(Time,  Red)  -> ERROR: NOT isPhysical(Time)

    hasColor(MyCar)? -> Red
    hasColor(Car)?   -> ERROR: NOT isInstance(Car)


isClass(Vehicle)
isClass(Car)
subClassOf(Car, Vehicle)
superClassOf(Vehicle, Car)

isInstance(MyCar)
isInstanceOf(MyCar, Car)

isPhysical(Car)

isClass(Color)
isInstance(Red)
isInstanceOf(Red, Color)
isColor(Red)

hasColor(isPhysical, isColor)
hasColor(MyCar, Red)


class Concept {
    -name : String
    -relations : Map<String, Relation>
}

class Relation {
    -name : String
    -isReflective : boolean
    -isTransative : boolean
    -inverses : Set<Relation>
    -disjoints : Set<Relation>
    -concept : Concept
}


isClass(Animal)

    Item {
        name = "Animal"
        relations = {Relation {name = "isClass", item = null}}
    }

generalizes(Animal, Mammal) <-> specializes(Mammal, Animal)

    Item {
        name = "Animal"
        relations = {Relation {name = "isClass", item = null}, Relation {name = "generalizes", item = Item {name = "Mammal", relations = {Relation{name = "specializes", item{"Animal"}}}}}}
    }

    
new class Vehicle
new class Car extends Vehicle
new class Color
new property Color color
new instance Color Red
new instance Car MyCar
set property color of MyCar to Red

extends(Car, Vehicle)
Car extends Vehicle <--> Vehicle is-extended-by Car

<relation>[(<relation>[, <relation>])]
    isClass
    isInstance
        inverse isExtendedBy

> isClass
> extends(isClass, isClass)
> extendedBy(isClass, isClass)
> extends INVERSE extendedBy
> extends(Car, Vehicle)
    ->
        isClass(Car)
        isClass(Vehicle)
        extends(Car, Vehicle)
        extendedBy(Vehicle, Car)
       
> isClass?
Car
Vehicle
> extends(Car)?
Vehicle
> extendedBy(Vehicle)?
Car
       
> isInstance
> isInstance DISJOINT isClass
> isInstance(MyCar)
> instanceOf(isInstance, isClass)
> instanceOf(MyCar, Car)
> MyCar?
isInstance(MyCar)
instanceOf(MyCar, Car)
> isInstance?
MyCar
> instanceOf(MyCar)?
Car
> hasInstance(isClass, isInstance)
> hasInstance INVERSE instanceOf
> hasInstance(Car)?
MyCar

> isColor(Red)
> hasColor(isInstance, isColor)
> hasColor(MyCar, Red)
> Red?
isColor(Red)
hasColor(MyCar, Red)
> MyCar?
isInstance(MyCar)
instanceOf(MyCar, Car)
hasInstance(Car, MyCar)
hasColor(MyCar, Red)

> extends(Human, Animal)
> instanceOf(Oscar, Human)
> instanceOf(Oscar, Animal)?
true

> Oscar?
isInstance(Oscar)
instanceOf(Oscar, Human)
> extends(Animal)?
Human
> Human?
isClass(Human)
extends(Human, Animal)
instanceOf(Oscar, Human)
> instanceOf(Oscar)?
Human
> instanceOf(Oscar, Human)?
true
> instanceOf TRANSATIVE
> instanceOf(Oscar, Animal)?
true

> isDate
> hasBirthDate(instanceOf(Animal), isDate)
> hasBirthDate(Oscar, 1977-04-04)
> isDate?
isDate(1977-04-04)
