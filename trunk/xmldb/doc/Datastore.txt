Binary data store
=================

global.dbx
    nextId = 8

nodes.dbx
    node*
        id : long
        type : byte   # {COLLECTION, DOCUMENT, ELEMENT, ATTRIBUTE, TEXT}
        offset : long
        length : long

collections.dbx
    collection*
        name : String
        nofCollections : int
        collection* : long
        nofDocuments : int
        documents* : long

documents.dbx
    document*
        name : String
        rootElement : long        

elements.dbx
    element*
        name : String
        nofAttributes : byte
        attribute*
            name : String
            value : String 
        nofChildren : int
        children* : long

values.dbx
    value* : String


<?xml version="1.0" encoding="UTF-8"?>
<document>
    <header>
        <id>foo-001</id>
    </header>
    <body>
        <value>123</value>
    </body>
</document>

Document("foo-001.xml")
    Element("header")
        Element("id")
            Text("foo-001")
    Element("body")
        Element("value")
            Text("123")

nodes.dbx:
    Node
        id = 0
        type = COLLECTION
        offset = 0
        length = ...
    Node
        id = 1
        type = DOCUMENT
        offset = ...
        length = ...
    Node
        id = 2
        type = ELEMENT
        offset = ...
        length = ...
    Node
        id = 3
        type = ELEMENT
        offset = ...
        length = ...
    Node
        id = 4
        type = TEXT
        offset = ...
        length = ...
    Node
        id = 5
        type = ELEMENT
        offset = ...
        length = ...
    Node
        id = 6
        type = ELEMENT
        offset = ...
        length = ...
    Node
        id = 7
        type = TEXT
        offset = ...
        length = ...
        
collectons.dbx:
    Collection
        name = ""
        nofCollections = 0
        collections = {}
        nofDocuments = 1
        documents = {1}
    
documents.dbx:
    Document
        name = "foo-001.xml"
        rootElement = 2

elements.dbx:
    Element
        name = "document"
        nofAttributes = 0
        attributes = {}
        nofChildren = 1
        children = {3}
    Element
        name = "header"
        nofAttributes = 0
        attributes = {}
        nofChildren = 1
        children = {4}
    Element
        name = "id"
        nofAttributes = 0
        attributes = {}
        nofChildren = 1
        children = {4}
    Element
        name = "body"
        nofAttributes = 0
        attributes = {}
        nofChildren = 1
        children = {6}
    Element
        name = "value"
        nofAttributes = 0
        attributes = {}
        nofChildren = 1
        children = {7}
        
values.dbx:
    value = "foo-001"
    value = "123"
    

Indxes
------

str_index.dbx
    noOfElementIndexes : long
    elementIndex*
        name : String
        count : long
        element* : long
    noOfAttributeIndexes : long
    attributeIndex*
        name : String
        count : long
        attribute* : long

val_index.dbx
    noOfValueIndexes : long
    valueIndex*
        name : String
        type : byte  # {STRING, INTEGER, DATE}
    

RangeIndex("DocumentId", STRING)
    IndexValue("Foo-001")
        nodes : Set<Long>
    IndexValue("Foo-002")
        nodes : Set<Long>
    IndexValue("Bar-001")
        nodes : Set<Long>

/*[Header/DocumentId = 'Foo-001']
    SLASH STAR LBRACKET TEXT("Header") SLASH TEXT("DocumentId") EQ QUOT TEXT("Foo-001") QUOT RBRACKET
    ChildElementSelection()
    Predicate
        Equals
            NodeSelection --> Node*
                ChildElementSelection("Header") --> Element*
                ChildElementSelection("DocumentId") --> Element*
            StringLiteral("Foo-001")

- Use structural index for name "Header" --> Node*
- Filter on node type ELEMENT.
- Proceed normally ("/DocumentId = 'Foo-001']"
