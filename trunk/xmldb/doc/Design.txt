XPath expressions
=================


Test document
-------------

foo-001.xml:
    <?xml version="1.0" encoding="UTF-8"?>
    <document>
        <header>
            <id type="string">foo-001</id>
            <type>Foo</type>
        </header>
        <body>
            <title lang="EN">Some Foo document</title>
            <author>John Doe</author>
        </body>
    </document>

Document("foo-001.xml")
    Element("document")
        Element("header")
            Element("id")
                Attribute("type", "string")
                Text("foo-001")
            Element("type")
                Text("Foo")
        Element("Body")
            Element("title")
                Text("Some Foo document")
            Element("author")
                Text("John Doe")


Expressions
-----------

/document/header/id
    Expression --> Object
        NodeSelection --> Node*
            ChildElementSelection("document") --> Element*
            ChildElementSelection("header") --> Element*
            ChildElementSelection("id") --> Element*

/document[header/id = 'foo-001']
    Expression --> Object
        ChildElementSelection("document") --> Element*
        Predicate --> Boolean
            Equals --> Boolean
                NodeSelection --> Node*
                    ChildElement("header") (Element*)
                    ChildElement("id") (Element*)
                StringLiteral("foo-001") (String)
                
/a[b/text() = 'c']
    Expression
        NodeSelection --> Node*
            ChildElementSelection("a") --> Element*
        Predicate
            Equals
                TextFunction --> String
                    NodeSelection --> Node*
                        ChildElementSelection("b") --> Element* 
                StringLiteral("c") --> String

 count(/a)
    Expression --> Object
        CountFunction --> Integer
            NodeSelection --> Node*
                ChildElementSelection("a") --> Element*

count(/a) > 0
    Expression --> Object
        GreaterThanFunction --> Boolean
            Count --> Integer
                NodeSelection --> Node*
                    ChildElementSelection("a") --> Element*
            IntegerLiteral(0) --> Integer

1 + 2
    Expression --> Object
        SumFunction --> Number
            IntegerLiteral(1) --> Integer
            IntegerLiteral(2) --> Integer

(1, "a", true())
    Expression --> Object
        Sequence --> Object*
            IntegerLiteral(1) --> Integer
            StringLiteral("a") --> String
            TrueFunction() --> Boolean
            
            
Tokenizer & Parser
------------------

/document/header/id
    SLASH TEXT("document" SLASH TEXT("header") SLASH TEXT("id")
    Expression
        ChildElementSelection("document")
        ChildElementSelection("header")
        ChildElementSelection("id")

//id/text()
    SLASH SLASH TEXT("id" SLASH TEXT("text" LPAREN RPAREN
    DESCENDANT_ELEMENT("id") SLASH TEXT("text" LPAREN RPAREN
    Expression
        ChildElementSelection("id")
        Function("text")

count(//id)
    IDENT("count") LPAREN DESCENDANT IDENT("id") RPAREN
    Expression
        Function("count")
            DescendantElementSelection("id")

count(//id[text() = 'foo-001'])
    IDENT("count") LPAREN DESCENDANT IDENT("id") LBLOCK IDENT("text" LPAREN RPAREN EQ APOS IDENT("foo-001" APOS RBLOCK RPAREN
    Expression
        Function("count")
            DescendantElementSelection("id")
            Predicate
                Equals
                    Function("text")
                    StringLiteral("foo-001")

count(/document[//id/text() = 'foo-001'])
    Expression
        CountFunction
            ChildElementSelection("document")
                Predicate
                    Equals
                        NodeSelector
                            ChildDescendantSelector("id")
                        TextFunction
                        StringLiteral("foo-001")
